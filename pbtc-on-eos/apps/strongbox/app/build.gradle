apply plugin: 'com.android.application'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

File localFile = rootProject
    .file('local.properties')
    
Properties local = new Properties()
def bridgeName

if (localFile.exists()) {
    local.load(localFile.newDataInputStream())

    bridgeName = local['bridgeName']

    if (bridgeName == null) {
        bridgeName = System.env["BRIDGE_NAME"]
    }

    if (bridgeName == null) {
        throw new GradleException("Bridge's name not set")
    }
    
} else {
    bridgeName = System.env["BRIDGE_NAME"]
    if (bridgeName == null) {
        throw new GradleException("Bridge's name not set")
    }

    // ANDROID_HOME should be set in order to find the 
    // sdk.dir and ndk.dir location!
}

def nativeSymbol = bridgeName.split('-')[0].substring(1)
def hostSymbol = bridgeName.split('-')[2]
def ptokensBridge = "p${nativeSymbol}on${hostSymbol}"
def ptokensAppId = "io.ptokens.${ptokensBridge}"
def ptokensModuleName = "../common/jni/${bridgeName}"

android {
    signingConfigs {
        debugKeyProperties
    }

    compileSdkVersion 29

    defaultConfig {
        applicationId "${ptokensAppId}"
        minSdkVersion 28
        targetSdkVersion 28 // beaware changing this to an higher value: https://developer.android.com/preview/privacy/storage (EACCESS error) 
        versionCode 1
        versionName "2.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debugKeyProperties
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    defaultConfig {
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

task exportApkDebug {
    doLast {
        copy {
            println "Copying apk debug..."
            from "build/outputs/apk/debug/app-debug.apk"
            rename "app-debug.apk", "${ptokensBridge}-debug.apk"
            into "../"
        }
    }
    dependsOn assemble
}

task exportApkDebugUnsigned {
    doLast {
        copy {
            println "Copying apk debug..."
            from "build/outputs/apk/debug/app-debug-unsigned.apk"
            rename "app-debug-unsigned.apk", "${ptokensBridge}-debug.apk"
            into "../"
        }
    }
    dependsOn assemble
}

task exportApkRelease {
    doLast {
        copy {
            println "Copying apk release..."
            from "build/outputs/apk/release/app-release-unsigned.apk"
            rename "app-release-unsigned.apk", "${ptokensBridge}-release.apk"
            into "../"
        }
    }
    dependsOn assemble
}

//Signed builds need a signing.properties file with keystore description, otherwise will generate unsigned
def keyPropertiesFile = rootProject.file('signing.properties')

if (keyPropertiesFile.exists()) {
    println 'signing apk...'
    def keyProperties = new Properties()
    keyProperties.load(new FileInputStream(keyPropertiesFile))

    android.buildTypes.debug.signingConfig.keyPassword keyProperties['keyPassword']
    android.buildTypes.debug.signingConfig.storeFile rootProject.file(keyProperties['storeFile'])
    android.buildTypes.debug.signingConfig.storePassword keyProperties['storePassword']
    android.buildTypes.debug.signingConfig.keyAlias keyProperties['keyAlias']
    android.buildTypes.debug.signingConfig.v2SigningEnabled true
} else {
    println 'signing.properties not found'
    android.buildTypes.debug.signingConfig = null
}

cargo {
    module  = "${ptokensModuleName}"
    libname = "app_jni"
    targets = ["arm"]
    profile = "release"
}

preBuild {
    dependsOn "cargoBuild"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "commons-codec:commons-codec:1.9"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.gms:play-services-safetynet:15.0.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.4'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':common')
    implementation project(path: ':sqlite3')
}
